name: API Gateway CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'src/backend/api-gateway/**'
      - '.github/workflows/api-gateway.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/backend/api-gateway/**'
      - '.github/workflows/api-gateway.yml'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: api-gateway
  ECS_SERVICE: api-gateway
  ECS_CLUSTER: community-platform
  NODE_VERSION: '18.x'
  SNYK_SEVERITY_THRESHOLD: high
  WORKING_DIRECTORY: src/backend/api-gateway

permissions:
  contents: read
  id-token: write
  security-events: write
  deployments: write

concurrency:
  group: api-gateway-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Run ESLint
        run: pnpm run lint

      - name: Run unit tests
        run: pnpm run test:coverage

      - name: Build TypeScript
        run: |
          pnpm run clean
          pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ${{ env.WORKING_DIRECTORY }}/dist

  security-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build Docker image
        run: docker build -t ${{ env.ECR_REPOSITORY }}:${{ github.sha }} .

      - name: Run Snyk container scan
        uses: snyk/actions/docker@v0.3.0
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          args: --severity-threshold=${{ env.SNYK_SEVERITY_THRESHOLD }}
          sarif: true

      - name: Upload Snyk scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

  deploy:
    needs: security-scan
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --build-arg BUILD_VERSION=${GITHUB_REF#refs/tags/} \
            --build-arg COMMIT_SHA=${{ github.sha }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_SERVICE }} \
            --query taskDefinition > task-definition.json

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.ECS_SERVICE }} \
            --force-new-deployment

      - name: Monitor deployment health
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}

      - name: Create deployment status
        if: always()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ github.token }}
          state: ${{ job.status }}
          deployment-id: ${{ github.event.deployment.id }}