name: Web CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'src/web/**'
      - '.github/workflows/web.yml'
  pull_request:
    branches: [main]
    paths:
      - 'src/web/**'
      - '.github/workflows/web.yml'

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: '8.x'
  NEXT_TELEMETRY_DISABLED: 1
  WORKING_DIRECTORY: src/web

permissions:
  contents: read
  id-token: write
  deployments: write
  security-events: write
  actions: read
  packages: read

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm lint

      - name: Type check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm type-check

      - name: Run unit tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm test --coverage

      - name: Run E2E tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm test:e2e

      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: ${{ env.WORKING_DIRECTORY }}/coverage
          retention-days: 5

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript, typescript

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm install --frozen-lockfile

      - name: Build application
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm build
        env:
          ANALYZE: true
          NEXT_TELEMETRY_DISABLED: 1
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: ${{ env.WORKING_DIRECTORY }}/.next
          retention-days: 5

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v3
        with:
          name: bundle-analysis
          path: ${{ env.WORKING_DIRECTORY }}/.next/analyze
          retention-days: 5

  deploy:
    name: Deploy
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: production
    concurrency: production_deploy

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build
          path: ${{ env.WORKING_DIRECTORY }}/.next

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Deploy to staging
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          aws s3 sync .next/static s3://${{ secrets.STAGING_BUCKET }}/web/_next/static/ --delete
          aws cloudfront create-invalidation --distribution-id ${{ secrets.STAGING_DISTRIBUTION_ID }} --paths "/*"

      - name: Health check staging
        run: |
          for i in {1..5}; do
            if curl -s -f https://${{ secrets.STAGING_DOMAIN }}/api/health; then
              exit 0
            fi
            sleep 10
          done
          exit 1

      - name: Deploy to production
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          aws s3 sync .next/static s3://${{ secrets.PRODUCTION_BUCKET }}/web/_next/static/ --delete
          aws cloudfront create-invalidation --distribution-id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} --paths "/*"

      - name: Health check production
        run: |
          for i in {1..5}; do
            if curl -s -f https://${{ secrets.PRODUCTION_DOMAIN }}/api/health; then
              exit 0
            fi
            sleep 10
          done
          exit 1

      - name: Notify deployment status
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: 'deployments'
          slack-message: |
            *${{ github.workflow }}* deployment ${{ job.status }}
            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}