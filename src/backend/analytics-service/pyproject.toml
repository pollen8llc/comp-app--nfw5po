[build-system]
requires = ["poetry-core>=1.5.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "analytics-service"
version = "1.0.0"
description = "Analytics service for community management platform providing TDA and network analysis"
authors = ["Community Platform Team <team@platform.com>"]
python = "^3.11"

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.95.0"  # High-performance web framework
uvicorn = "^0.21.0"  # ASGI server implementation
pydantic = "^1.10.0"  # Data validation using Python type annotations
numpy = "^1.24.0"  # Scientific computing library
networkx = "^3.0"  # Network analysis library
gudhi = "^3.7.0"  # Topological Data Analysis library
prometheus-client = "^0.16.0"  # Monitoring and metrics
plotly = "^5.13.0"  # Interactive visualization library
scipy = "^1.10.0"  # Scientific computation support
scikit-learn = "^1.2.0"  # Machine learning utilities
python-dotenv = "^1.0.0"  # Environment variable management
structlog = "^23.1.0"  # Structured logging
grpcio = "^1.54.0"  # gRPC support
grpcio-tools = "^1.54.0"  # gRPC code generation tools
neo4j = "^5.0.0"  # Neo4j graph database driver
redis = "^4.5.0"  # Redis cache client

[tool.poetry.dev-dependencies]
pytest = "^7.3.0"  # Testing framework
pytest-asyncio = "^0.21.0"  # Async test support
pytest-cov = "^4.0.0"  # Test coverage reporting
black = "^23.3.0"  # Code formatting
isort = "^5.12.0"  # Import sorting
mypy = "^1.2.0"  # Static type checking
flake8 = "^6.0.0"  # Code linting
docker = "^6.1.0"  # Docker integration for testing
pre-commit = "^3.3.0"  # Git hooks management

[tool.poetry.scripts]
start = "uvicorn src.app:app --host 0.0.0.0 --port 5000 --reload"
test = "pytest tests/ --cov=src --cov-report=xml"
lint = "flake8 src/ tests/"
format = "black src/ tests/ && isort src/ tests/"
type-check = "mypy src/"
security-check = "safety check"
build-protos = "python -m grpc_tools.protoc -I protos/ --python_out=src/ --grpc_python_out=src/ protos/*.proto"

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100

[tool.mypy]
python_version = "3.11"
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
strict_optional = true

[tool.pytest.ini_options]
minversion = "7.3"
addopts = "-ra -q --cov=src --cov-report=term-missing"
testpaths = ["tests"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "**/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]