apiVersion: apps/v1
kind: Deployment
metadata:
  name: member-service
  namespace: community-platform
  labels:
    app: member-service
    component: backend
    tier: service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: member-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: member-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      containers:
      - name: member-service
        image: member-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 4000
          name: grpc
        - containerPort: 9090
          name: metrics
        resources:
          limits:
            cpu: "1"
            memory: "2Gi"
          requests:
            cpu: "500m"
            memory: "1Gi"
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: platform-config
              key: environment
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: platform-config
              key: logLevel
        - name: NEO4J_URI
          valueFrom:
            secretKeyRef:
              name: platform-secrets
              key: member_service_secrets.yaml.neo4j.uri
        - name: NEO4J_USERNAME
          valueFrom:
            secretKeyRef:
              name: platform-secrets
              key: member_service_secrets.yaml.neo4j.username
        - name: NEO4J_PASSWORD
          valueFrom:
            secretKeyRef:
              name: platform-secrets
              key: member_service_secrets.yaml.neo4j.password
        - name: NEO4J_TLS_CERT
          valueFrom:
            secretKeyRef:
              name: platform-secrets
              key: member_service_secrets.yaml.neo4j.tlsCert
        - name: S3_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: platform-secrets
              key: member_service_secrets.yaml.storage.s3AccessKey
        - name: S3_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: platform-secrets
              key: member_service_secrets.yaml.storage.s3SecretKey
        - name: S3_BUCKET_NAME
          valueFrom:
            secretKeyRef:
              name: platform-secrets
              key: member_service_secrets.yaml.storage.bucketName
        livenessProbe:
          httpGet:
            path: /health
            port: 4000
          initialDelaySeconds: 30
          timeoutSeconds: 10
          periodSeconds: 30
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 4000
          initialDelaySeconds: 15
          timeoutSeconds: 5
          periodSeconds: 10
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - member-service
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 60